// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  orders    Order[]
  reviews   Review[]
  cartItems Cart[]
  Wishlist  Wishlist[]
}

model Book {
  id          Int         @id @default(autoincrement())
  title       String
  author      String
  genre       String?
  description String?
  price       Float
  stock       Int         @default(0)
  imageUrl    String?
  isbn        String?     @unique
  status      String      @default("available")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  Review      Review[]
  Cart        Cart[]
  Wishlist    Wishlist[]

  @@unique([title, author], name: "title_author")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  totalPrice Decimal     @db.Decimal(10, 2)
  status     OrderStatus @default(PENDING)
  orderDate  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  payment    Payment?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  bookId    Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  rating    Int      @default(1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model Payment {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  paidAmount  Decimal       @db.Decimal(10, 2)
  paymentDate DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  order       Order         @relation(fields: [orderId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PaymentMethod {
  COD
  BANK_TRANSFER
  ESEWA
  KHALTI
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}
